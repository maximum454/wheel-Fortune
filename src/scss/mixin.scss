$maxWidth: 1240;
@mixin adaptive-font($pcSize, $mobSize){
	$addSize: $pcSize - $mobSize;
	$addMobSize: $addSize + $addSize * 0.7;
	@media (max-width: 767px) {
		font-size: calc(#{$mobSize + px} + #{$addMobSize} * ((100vw - 320px) / #{$maxWidth}));
	}
	@media (min-width: 767px) {
		font-size: calc(#{$mobSize + px} + #{$addSize} * (100vw / #{$maxWidth}));
	}
}

// width
@mixin r($width){
	@media only screen and (max-width: $width+ "px"){
		@content
	}
}

@mixin rmin($width){
	@media only screen and (min-width: $width+ "px"){
		@content
	}
}
// height
@mixin rh($height){
	@media only screen and (max-height: $height + "px"){
		@content
	}
}

@mixin rhmin($height){
	@media only screen and (min-height: $height + "px"){
		@content
	}
}

/*
* @include triangle within a pseudo element and add positioning properties (ie. top, left)
* $direction: up, down, left, right
*/
@mixin triangle($direction, $size: 6px, $color: #222){
	content: '';
	display: block;
	position: absolute;
	height: 0; width: 0;
	@if ($direction == 'up'){
		border-bottom: $size solid $color;
		border-left: 1/2*$size solid transparent;
		border-right: 1/2*$size solid transparent;
	}
	@else if ($direction == 'down'){
		border-top: $size solid $color;
		border-left: 1/2*$size solid transparent;
		border-right: 1/2*$size solid transparent;
	}
	@else if ($direction == 'left'){
		border-top: 1/2*$size solid transparent;
		border-bottom: 1/2*$size solid transparent;
		border-right: $size solid $color;
	}
	@else if ($direction == 'right'){
		border-top: 1/2*$size solid transparent;
		border-bottom: 1/2*$size solid transparent;
		border-left: $size solid $color;
	}
}

/*
  Maintain ratio mixin.
  @param {List} [$ratio] Ratio the element needs to maintain. A 16:9 ratio would look like this:
  .element { @include maintain-ratio(16 9); }
*/
@mixin maintain-ratio($ratio: 1 1) {
	$width: 100%;
	$height: percentage(nth($ratio, 2) / nth($ratio, 1));

	width: $width;
	height: 0;
	padding-bottom: $height;
}
